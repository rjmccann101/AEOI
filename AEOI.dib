#!markdown

# Introduction

The Automatic Exchange of Information, AEOI, is an agreement by the UK to exchange tax information with other countries. The details of  AEOI can be found here: https://www.gov.uk/guidance/automatic-exchange-of-information-introduction on the HMRC website.

This notebook is an attempt to create an F# Domain Model that supports the data specified by HMRC for AEOI reporting and which is easily serializable to XML in a format that meets the XML Schema specified.

#!markdown

## FPrimitive

The FPrimitive library (see: https://github.com/stijnmoreels/FPrimitive) will be used by the model to provide specifications for the elements of the data model.

#!fsharp

#r "nuget: FPrimitive"

#!fsharp

open FPrimitive

#!markdown

### Positive Integer
A type that only allows positive integer numbers.

#!fsharp

type PositiveInt =
  private PositiveInt of int with
    static member create x =
      Spec.def 
      |> Spec.greaterThanOrEqual 0 "integer should be greater than zero"
      |> Spec.createModel PositiveInt x

#!markdown

## MessageReference
This is the senders unique reference for the message and it must be between 24 and 36 characters long

#!fsharp

type MessageReference =
    private MessageReference of string with 
        static member create x =
            Spec.def
            |> Spec.lengthBetween 24 36 "Message Reference must be between 24 and 36 characters long"
            |> Spec.createModel MessageReference x

#!markdown

### Payment Amount
The amount of money paid from an account.  This value must be greater tha 0.01

#!fsharp

type PaymentAmount =
    private PaymentAmount of decimal with
        static member create x =
            Spec.def
            |> Spec.greaterThan 0.01m "Payment amount should be greater than or equal to 0.01"
            |> Spec.createModel PaymentAmount x

#!markdown

## Date of Birth
When submitting a date of birth as part of the AEOI submission the date must be between 01/01/1900 and the current dat

#!fsharp

type BirthDate =
    private BirthDate of DateTime with 
        static member create x =
            Spec.def
            |> Spec.greaterThanOrEqual DateTime.Now "Birth date should be after 1900/01/01"
            |> Spec.lessThan (DateTime(1900,1,1)) "Birth date should be before current date"
            |> Spec.createModel BirthDate x

#!fsharp

type MessageCategory =
| NewSubmission
| SubmissionVariation
| SubmissionReplacement
| SubmissionVoid

type MessageData = {
    messageCategory : MessageCategory
}

#!fsharp

type AEOIUKSubmissionFIReport = {
    schemaVersion : PositiveDecimal
    messageData : MessageCategory
}
